def application =params.Application
def action =params.Action
def haproxyFromParam= params.haproxy
def backendFromParam =params.backend
def backendServersFromParam = params.backend_server
def portFromParam =params.port
def publishResults=''
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')

pipeline {
    agent any

    stages {

		stage('Pre-execution'){
			steps {
				script{
					println "pre-execution to add parameter validations"
					if(application!='ALL'){
						def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
						println haproxyFromParamArray
						if(haproxyFromParamArray.contains("ALL")){
							if(haproxyFromParamArray.size()>1)
							{
								println "haproxy selected from job parameter: " +haproxyFromParamArray
								println "incorrect parameter selection, ignoring separate haproxy because option ALL already covers it"	
							} 
						}
					}
				}
			}			
			
		}
		stage('Parallel execution') {
			parallel {
				stage('CSSNCE') {
					when {
						expression {
						'CSSNCE' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								def stageAction
								if(action=='Pre-Patching'){
									stageAction='drain'
								}	
								else if(action=='Post-Patching'){
									stageAction='ready'
								}
								else {
									stageAction =action
								} 
								println "Performing "+ stageAction +" on application CSSNCE"								
								def serverDetails = readJSON file: 'CSS.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def css_servers = serverDetails.CSS_NCE_SERVERS
								def backend = serverDetails.CSS_BACKENDS
								def sockFileLoc = serverDetails.SOCKFILE
								def result=''
								def backendFromParamArray =Arrays.asList((backendFromParam).split(","))
								def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def server
								
								if(application =='CSSNCE'&& (!haproxyFromParamArray.contains("ALL"))) {
									HAProxyServers = haproxyFromParamArray
									css_servers = backendServersFromParamArray
									backend = backendFromParamArray
									println "HAProxy server selected from parameter: " + HAProxyServers
									println "backend selected from parameter: " + backend
									println "backend server selected from parameter: " + css_servers
									
								}
								
								result = performAction(HAProxyServers, backend, css_servers, stageAction, sockFileLoc )
								publishResults = publishResults + "CSSNCE " + result+ "\n"									
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "CSSNCE: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
				stage('GPDNCE') {
					when {
						expression {
						'GPDNCE' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								def stageAction
								if(action=='Pre-Patching'){
									stageAction='drain'
								}	
								else if(action=='Post-Patching'){
									stageAction='ready'
								}
								else {
									stageAction =action
								} 

								println "Performing "+ stageAction +" on application GPDNCE"								
								def serverDetails = readJSON file: 'GPD.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def gpd_servers = serverDetails.GPD_NCE_SERVERS
								def backend = serverDetails.GPD_BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								def backendFromParamArray =Arrays.asList((backendFromParam).split(","))
								def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def result =''
								
								if(application =='GPDNCE'&& (!haproxyFromParamArray.contains("ALL"))){
									HAProxyServers = haproxyFromParamArray
									gpd_servers = backendServersFromParamArray
									backend = backendFromParamArray
									println "HAProxy server selected from parameter: " + HAProxyServers
									println "backend selected from parameter: " + backend
									println "backend server selected from parameter: " + gpd_servers
								}
								
								result = performAction(HAProxyServers, backend, gpd_servers, stageAction, sockFileLoc )
								publishResults = publishResults + "GPDNCE: " + result+ "\n"
								
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "GPDNCE: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
				stage('SiebelNCE') {
					when {
						expression {
						'SiebelNCE' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								def stageAction

								if(action=='Pre-Patching'){
									stageAction='maint'
								}	
								else if(action=='Post-Patching'){
									stageAction='ready'
								}
								else {
									stageAction =action
								} 

								println "Performing "+ stageAction +" on application SiebelNCE"
								def serverDetails = readJSON file: 'Siebel.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def siebel_servers = serverDetails.SIEBEL_NCE_SERVERS
								def siebel_backend= serverDetails.SIEBEL_NCE_BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								def backendFromParamArray =Arrays.asList((backendFromParam).split(","))
								def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def result
								
								if(application =='SiebelNCE'&& (!haproxyFromParamArray.contains("ALL"))){
									HAProxyServers = haproxyFromParamArray
									siebel_servers = backendServersFromParamArray
									siebel_backend = backendFromParamArray
									println "HAProxy server selected from parameter: " + HAProxyServers
									println "backend selected from parameter: " + siebel_backend
									println "backend server selected from parameter: " + siebel_servers
								}								
								
								result =performAction(HAProxyServers, siebel_backend, siebel_servers, stageAction , sockFileLoc )
									
								publishResults = publishResults + "SiebelNCE: " + result+ "\n"
								
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "SiebelNCE: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
									sh "exit 1"
								}
							}
						}      
					}
				}  
				stage('SOMNCE') {
					when {
						expression {
						'SOMNCE' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								def stageAction
								
								if(action=='Pre-Patching'){
									stageAction='disable'
								}	
								else if(action=='Post-Patching'){
									stageAction='enable'
								}
								else {
									stageAction =action
								} 
								println "Performing "+ stageAction +" on application SOMNCE"								
								def serverDetails = readJSON file: 'SOM.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def som_servers = serverDetails.SOM_NCE_SERVERS
								def backendWithPort = serverDetails.BACKEND_PORT
								def sockFileLoc = serverDetails.SOCKFILE
								def som_global_lead_mgmt_server= serverDetails.SOM_GLOBAL_LEAD_MANAGEMENT_NCE_SERVERS
								def backendPortGlobalLeadMGMT = serverDetails.BACKEND_PORT_SOM_GLOBAL_LEAD_MANAGEMENT
								def haproxyFromParamArray =Arrays.asList((haproxyFromParam).split(","))
								def backendFromParamArray =Arrays.asList((backendFromParam).split(","))
								def backendServersFromParamArray = Arrays.asList((backendServersFromParam).split(","))
								def portFromParamArray = Arrays.asList((portFromParam).split(","))
								def SOMResult
								def SOMGlobalLeadResult
								
								if(application =='SOMNCE'&& (!haproxyFromParamArray.contains("ALL"))){
									HAProxyServers = haproxyFromParamArray
									som_servers = backendServersFromParamArray
									def backendWithPortMap = [(backendFromParam.toString()):portFromParamArray] 
									println "backend from param: "+backendFromParam
									println "HAProxy server selected from parameter: " + HAProxyServers
									println "backend server selected from parameter" + som_servers
									backendWithPort = backendWithPortMap	
									println "backendWithPortMap" + backendWithPortMap
									SOMResult = performActionOnSOM(HAProxyServers, backendWithPort, som_servers, stageAction, sockFileLoc )
									publishResults = publishResults + "SOMNCE: " + SOMResult+ "\n"
									
								}
								
								else{ 
									
									SOMResult = performActionOnSOM(HAProxyServers, backendWithPort, som_servers, stageAction, sockFileLoc )
									publishResults = publishResults + "SOMNCE: " + SOMResult+ "\n"
									SOMGlobalLeadResult = performActionOnSOM(HAProxyServers, backendPortGlobalLeadMGMT, som_global_lead_mgmt_server, stageAction, sockFileLoc )
									publishResults = publishResults + "SOM GLOBAL LEAD: " + SOMGlobalLeadResult+ "\n"	
								}

							}catch(Exception e) {
								SOMResult ='Failed'
								publishResults = publishResults + "SOMNCE: " + SOMResult+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
			}
		} 
	}
    post {
	always {
		println publishResults
		/*sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
		message: " Job URL: ${env.JOB_URL} \n BUILD_NUMBER: ${env.BUILD_NUMBER} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n StageResult: [${publishResults}] ",
		spaceList: [[spaceId: 'e26bdaf0-e471-11ed-8020-692d324207aa', 
		spaceName: 'Jenkins Job Status - OPS']]*/
	}
} 
	
}
def performAction(Object HAProxyServers, Object backend, Object server, String action, Object sockFileLoc ){
	def result =''
	for(ha in HAProxyServers) {
		def SSH_OPTION="ssh jenkins_worker@${ha} -o StrictHostKeyChecking=no"
		for(bknd in backend) {
			for(s in server) {
				println "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockFileLoc'"
				try{
					//sh "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockFileLoc'"
					result ='Success'
					
				}catch(Exception e) {
					result ='Failure'	
					catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
						sh "exit 1"
					}
				}
			}
		}
	}
	return result
}
def performActionOnSOM(Object haproxyservers, Object backendWithPort, Object server, String action, Object sockfileloc ){
	def result ='Success'
	def backend
	def portarray
	for(ha in haproxyservers) {
		def SSH_OPTION="ssh jenkins_worker@${ha} -o StrictHostKeyChecking=no"
		for(def bwp in backendWithPort)
		{
			backend =bwp.key
			for(port in bwp.value)
				{
					for(s in server) {
						println "$SSH_OPTION  -o LogLevel=error 'echo $action server $backend/$s-$port | sudo socat stdio $sockfileloc'"
						//ssh "$SSH_OPTION  -o LogLevel=error 'echo $action server $backend/$s-$port | sudo socat stdio $sockfileloc'"
					}
				}
			
		}
	}
	return result
}
